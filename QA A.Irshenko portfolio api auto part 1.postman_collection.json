{
	"info": {
		"_postman_id": "2bac12cf-3413-4078-a8a0-a50e9dbdddbb",
		"name": "QA A.Irshenko portfolio api auto part 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "24701514"
	},
	"item": [
		{
			"name": "Get /security/get-captcha-url",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains url key\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"url\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that url contains a captcha link\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    const url = responseBody.url;\r",
							"    pm.expect(url).to.include(\"Captcha\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the format of url\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    const url = responseBody.url;\r",
							"    pm.expect(url).to.match(/^https:\\/\\//);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/security/get-captcha-url"
			},
			"response": []
		},
		{
			"name": "Post /auth/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains userId\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"userId\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that userId is not empty or null\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.userId).to.not.be.oneOf(\"\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the type of data for the userId\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.userId).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that resultCode is 0\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.resultCode).to.be.equal(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that messages is empty\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.messages).to.be.an(\"array\").that.is.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Check that fieldErrors are empty\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.fieldsErrors).to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Output userId to console\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    console.log(\"userId:\", responseBody.userId);\r",
							"});\r",
							"\r",
							"pm.test(\"Output data object to console\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    console.log(\"Data Object:\", responseBody.data);\r",
							"});\r",
							"\r",
							"pm.test(\"Create a userId variable in the environment and pass the userId value to the variable\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.environment.set(\"userId\", userId);\r",
							"});\r",
							"\r",
							"pm.test(\"Create an email variable in the environment and pass the email value to the variable\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.environment.set(\"email\", email);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"user@example.com\",\r\n    \"password\": \"secretpassword\",\r\n    \"rememberMe\": true,\r\n    \"captcha\": false\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/auth/login"
			},
			"response": []
		},
		{
			"name": "Get /auth/me",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the response contains id\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that id from the response equals id in the environment\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    const responseid = responseBody.id;\r",
							"    const environmentid = pm.environment.get(\"userId\");\r",
							"    pm.expect(responseid).to.equal(environmentid);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that email from the response equals email in the environment\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    const responseemail = responseBody.email;\r",
							"    const environmentemail = pm.environment.get(\"email\");\r",
							"    pm.expect(responseemail).to.equal(environmentemail);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that resultCode is 0\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.resultCode).to.be.equal(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that messages is empty\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.messages).to.be.an(\"array\").that.is.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Check that fieldErrors are empty\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.fieldsErrors).to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Output id to console\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    console.log(\"id:\", responseBody.id);\r",
							"});\r",
							"\r",
							"pm.test(\"Output data object to console\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    console.log(\"Data Object 1:\", responseBody.data);\r",
							"});\r",
							"\r",
							"pm.test(\"Put login into the console\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    const login = responseBody.login;\r",
							"    console.log(\"Email:\", login);\r",
							"});\r",
							"\r",
							"pm.test(\"Put email into the console\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    const email = responseBody.email;\r",
							"    console.log(\"Email:\", email);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the id format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.id).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the login format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.login).to.be.a(\"String\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the email format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.email).to.be.a(\"String\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/auth/me"
			},
			"response": []
		},
		{
			"name": "Put /profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains resultCode\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"resultCode\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains messages\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"messages\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains data\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"data\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the type of data for the resultCode\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.resultCode).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the type of data for the messages\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    const messages = responseBody.messages;\r",
							"\r",
							"    pm.expect(messages).to.be.an(\"array\");\r",
							"\r",
							"    messages.forEach(function (message) {\r",
							"        pm.expect(message).to.be.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the type of data for the data\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.data).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that resultCode is 0\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.resultCode).to.be.equal(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that messages is empty\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.messages).to.be.an(\"array\").that.is.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Create variables for the collection\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    const contacts = responseBody.contacts;\r",
							"    const lookingForAJobDescription = responseBody.lookingForAJobDescription;\r",
							"    const lookingForAJob = responseBody.lookingForAJob;\r",
							"    const fullName = responseBody.fullName;\r",
							"    const userId = responseBody.userId;\r",
							"\r",
							"    pm.collectionVariables.set(\"userId\", userId);\r",
							"    pm.collectionVariables.set(\"fullName\", fullName);\r",
							"    pm.collectionVariables.set(\"lookingForAJob\", lookingForAJob);\r",
							"    pm.collectionVariables.set(\"lookingForAJobDescription\", lookingForAJobDescription);\r",
							"    pm.collectionVariables.set(\"contacts\", contacts);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Pre-request Script to fill the \"AboutMe\" field with a random string\r",
							"const randomString = (length) => {\r",
							"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
							"    let result = \"\";\r",
							"\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        result += characters.charAt(randomIndex);\r",
							"    }\r",
							"\r",
							"    return result;\r",
							"};\r",
							"\r",
							"const aboutMeLength = 12;\r",
							"const randomAboutMe = randomString(aboutMeLength);\r",
							"\r",
							"pm.variables.set(\"randomAboutMe\", randomAboutMe);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": 123,\r\n    \"lookingForAJob\": true,\r\n    \"lookingForAJobDescription\": \"Looking for a job description...\",\r\n    \"fullName\": \"John Doe\",\r\n    \"contacts\": {\r\n        \"github\": \"https://github.com/johndoe\",\r\n        \"vk\": \"https://vk.com/johndoe\",\r\n        \"facebook\": \"https://facebook.com/johndoe\",\r\n        \"instagram\": \"https://instagram.com/johndoe\",\r\n        \"twitter\": \"https://twitter.com/johndoe\",\r\n        \"website\": \"https://johndoe.com\",\r\n        \"youtube\": \"https://youtube.com/johndoe\",\r\n        \"mainLink\": \"https://mainlink.com\"\r\n    },\r\n    \"aboutMe\": \"{{randomAboutMe}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/profile"
			},
			"response": []
		},
		{
			"name": "Get /profile/{userId}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const userId = pm.environment.get(\"userId\");\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains userId\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"userId\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the userId in the response is the same as in the request\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    const userIdFromResponse = responseBody.userId;\r",
							"    const userIdFromRequest = pm.request.url.query.get(\"userId\");\r",
							"    \r",
							"    pm.expect(userIdFromResponse).to.eql(userIdFromRequest);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the userId format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.userId).to.be.a(\"integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains photos\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"photos\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the photos format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.photos).to.be.a(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains lookingForAJob\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"lookingForAJob\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the lookingForAJob format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.lookingForAJob).to.be.a(\"boolean\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains lookingForAJobDescription\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"lookingForAJobDescription\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the lookingForAJobDescription format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.lookingForAJobDescription).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains fullName\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"fullName\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the fullName format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.fullName).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains contacts\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"contacts\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the contacts format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.contacts).to.be.a(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains github\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"github\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the github format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.github).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains vk\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"vk\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the vk format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.vk).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains facebook\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"facebook\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the facebook format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.facebook).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains instagram\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"instagram\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the instagram format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.instagram).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains twitter\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"twitter\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the twitter format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.twitter).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains website\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"website\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the website format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.website).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains youtube\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"youtube\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the youtube format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.youtube).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response contains mainLink\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"mainLink\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the mainLink format\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.mainLink).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// JSON schema response\r",
							"const responseSchema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"userId\": { \"type\": \"integer\" },\r",
							"    \"lookingForAJob\": { \"type\": \"boolean\" },\r",
							"    \"lookingForAJobDescription\": { \"type\": \"string\" },\r",
							"    \"fullName\": { \"type\": \"string\" },\r",
							"    \"contacts\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"github\": { \"type\": \"string\" },\r",
							"        \"vk\": { \"type\": \"string\" },\r",
							"        \"facebook\": { \"type\": \"string\" },\r",
							"        \"instagram\": { \"type\": \"string\" },\r",
							"        \"twitter\": { \"type\": \"string\" },\r",
							"        \"website\": { \"type\": \"string\" },\r",
							"        \"youtube\": { \"type\": \"string\" },\r",
							"        \"mainLink\": { \"type\": \"string\" }\r",
							"      },\r",
							"      \"required\": [\"github\", \"vk\", \"facebook\", \"instagram\", \"twitter\", \"website\", \"youtube\", \"mainLink\"]\r",
							"    },\r",
							"    \"photos\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"small\": { \"type\": \"string\" },\r",
							"        \"large\": { \"type\": \"string\" }\r",
							"      },\r",
							"      \"required\": [\"small\", \"large\"]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\"userId\", \"lookingForAJob\", \"lookingForAJobDescription\", \"fullName\", \"contacts\", \"photos\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Response has the correct schema\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    const validationResult = tv4.validate(responseBody, responseSchema);\r",
							"    pm.expect(validationResult, \"Response schema is valid\").to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Check profile details in the response match the sent data\", function () {\r",
							"    const sentData = {\r",
							"        userId: 123,\r",
							"        lookingForAJob: true,\r",
							"        lookingForAJobDescription: \"Looking for a job description...\",\r",
							"        fullName: \"John Doe\",\r",
							"        contacts: {\r",
							"            github: \"https://github.com/johndoe\",\r",
							"            vk: \"https://vk.com/johndoe\",\r",
							"            facebook: \"https://facebook.com/johndoe\",\r",
							"            instagram: \"https://instagram.com/johndoe\",\r",
							"            twitter: \"https://twitter.com/johndoe\",\r",
							"            website: \"https://johndoe.com\",\r",
							"            youtube: \"https://youtube.com/johndoe\",\r",
							"            mainLink: \"https://mainlink.com\"\r",
							"        }\r",
							"    };\r",
							"\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.userId).to.eql(sentData.userId);\r",
							"    pm.expect(responseBody.lookingForAJob).to.eql(sentData.lookingForAJob);\r",
							"    pm.expect(responseBody.lookingForAJobDescription).to.eql(sentData.lookingForAJobDescription);\r",
							"    pm.expect(responseBody.fullName).to.eql(sentData.fullName);\r",
							"    pm.expect(responseBody.contacts).to.eql(sentData.contacts);\r",
							"});\r",
							"\r",
							"pm.test(\"Output facebook to console\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    console.log(\"facebook:\", responseBody.facebook);\r",
							"});\r",
							"\r",
							"pm.test(\"Output lookingForAJobDescription to console\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    console.log(\"lookingForAJobDescription:\", responseBody.lookingForAJobDescription);\r",
							"});\r",
							"\r",
							"pm.test(\"Output userId to console\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    console.log(\"userId:\", responseBody.userId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/profile/{userId}"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "fullName",
			"value": ""
		},
		{
			"key": "lookingForAJob",
			"value": ""
		},
		{
			"key": "lookingForAJobDescription",
			"value": ""
		},
		{
			"key": "contacts",
			"value": ""
		}
	]
}